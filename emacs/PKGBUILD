# -*- mode: sh; tab-width: 2; -*-
# Maintainer: Yang Zhang <yangzhang@live.com>
# Upstream URL: http://www.gnu.org/software/emacs/

COMPO3="YES"      # Produce .eln files with highest optimization level
GOLD="YES"        # Use the gold linker.
LTO="YES"         # Enable link-time optimization. Not that experimental anymore.
NOGZ="YES"        # Don't compress .el files.
NOX=              # CLI only binary.
NOCAIRO=          # Disable here.
XWIDGETS=         # Use GTK+ widgets pulled from webkit2gtk. Usable.

pkgname=(emacs-git emacs-nox-git)
pkgbase=emacs
pkgver=28.0.50.141102
pkgrel=1
pkgdesc="GNU Emacs. Development master branch."
arch=('x86_64')
url="http://www.gnu.org/software/emacs/"
license=('GPL3')
depends=('gnutls' 'libxml2' 'jansson' 'gpm' 'libgccjit')
makedepends=('git' 'alsa-lib' 'giflib' 'gtk3' 'harfbuzz' 'libjpeg-turbo' 'libotf' 'm17n-lib' 'xorgproto')
source=("$pkgbase::git://git.savannah.gnu.org/emacs.git#branch=feature/native-comp")
options=(!strip)
md5sums=('SKIP')

pkgver() {
  cd "$pkgbase"

  printf "%s.%s" \
    "$(grep AC_INIT configure.ac | \
    sed -e 's/^.\+\ \([0-9]\+\.[0-9]\+\.[0-9]\+\?\).\+$/\1/')" \
    "$(git rev-list --count HEAD)"
}

# There is no need to run autogen.sh after first checkout.
# Doing so, breaks incremental compilation.
prepare() {
  cd "$pkgbase"

  # disable font composition, i.e., ligature
  patch -p1  << __EOF__
--- a/src/composite.c
+++ b/src/composite.c
@@ -999,7 +999,7 @@ composition_compute_stop_pos (struct composition_it *cmp_it, ptrdiff_t charpos,
   cmp_it->ch = -2;
   cmp_it->reversed_p = 0;
   cmp_it->stop_pos = endpos;
-  if (charpos == endpos)
+  /* if (charpos == endpos) */
     return;
   /* FIXME: Bidi is not yet handled well in static composition.  */
   if (charpos < endpos
__EOF__

  # use hashtable for face lookup
  patch -p1  << __EOF__
--- a/src/frame.c
+++ b/src/frame.c
@@ -1343,6 +1343,7 @@ DEFUN ("make-terminal-frame", Fmake_terminal_frame, Smake_terminal_frame,
      be copied as well.  */
   for (tem = f->face_alist; CONSP (tem); tem = XCDR (tem))
     XSETCDR (XCAR (tem), Fcopy_sequence (XCDR (XCAR (tem))));
+  fset_face_alist (f, f->face_alist);

   f->can_set_window_size = true;
   f->after_make_frame = true;
@@ -3786,6 +3787,21 @@ DEFUN ("set-frame-window-state-change", Fset_frame_window_state_change,
 #endif
 };

+void
+fset_face_alist (struct frame *f, Lisp_Object val)
+{
+  f->face_alist = val;
+  f->face_by_name = make_hash_table(hashtest_eq, list_length(val), DEFAULT_REHASH_SIZE, DEFAULT_REHASH_THRESHOLD, Qnil, false);
+  struct Lisp_Hash_Table *t = XHASH_TABLE(f->face_by_name);
+  for (; ! NILP (val); val = XCDR (val)) {
+      Lisp_Object key = XCAR(XCAR(val));
+      Lisp_Object value = XCDR(XCAR(val));
+      Lisp_Object hash_code;
+      hash_lookup(t, key, &hash_code);
+      hash_put(t, key, value, hash_code);
+  }
+}
+
 #ifdef HAVE_WINDOW_SYSTEM

 /* Enumeration type for switch in frame_float.  */

--- a/src/frame.h
+++ b/src/frame.h
@@ -160,6 +160,7 @@ struct frame

   /* Alist of elements (FACE-NAME . FACE-VECTOR-DATA).  */
   Lisp_Object face_alist;
+  Lisp_Object face_by_name;

   /* A vector that records the entire structure of this frame's menu bar.
      For the format of the data, see extensive comments in xmenu.c.
@@ -660,11 +661,8 @@ fset_condemned_scroll_bars (struct frame *f, Lisp_Object val)
 {
   f->condemned_scroll_bars = val;
 }
-INLINE void
-fset_face_alist (struct frame *f, Lisp_Object val)
-{
-  f->face_alist = val;
-}
+void
+fset_face_alist (struct frame *f, Lisp_Object val);
 #if defined (HAVE_WINDOW_SYSTEM)
 INLINE void
 fset_parent_frame (struct frame *f, Lisp_Object val)
diff --git a/src/xfaces.c b/src/xfaces.c
index 73a536b19c6..d8ebd72f6b4 100644
--- a/src/xfaces.c
+++ b/src/xfaces.c
@@ -1955,6 +1955,7 @@ resolve_face_name (Lisp_Object face_name, bool signal_p)
    face text properties; Ediff uses that).
    If SIGNAL_P, signal an error if FACE_NAME is not a valid face name.
    Otherwise, value is nil if FACE_NAME is not a valid face name.  */
+#if 0
 static Lisp_Object
 lface_from_face_name_no_resolve (struct frame *f, Lisp_Object face_name,
           bool signal_p)
@@ -1975,6 +1976,41 @@ lface_from_face_name_no_resolve (struct frame *f, Lisp_Object face_name,

   return lface;
 }
+#else
+static Lisp_Object
+lface_from_face_name_no_resolve (struct frame *f, Lisp_Object face_name,
+                                 bool signal_p)
+{
+    Lisp_Object lface;
+
+    if (f) {
+        if (f->face_by_name) {
+            struct Lisp_Hash_Table *t = XHASH_TABLE(f->face_by_name);
+            ptrdiff_t i = hash_lookup (t, face_name, NULL);
+            if (i >= 0) {
+                lface = HASH_VALUE(t, i);
+                check_lface (lface);
+                return lface;
+            }
+        }
+
+        if (signal_p)
+            signal_error ("Invalid face", face_name);
+        return Qnil;
+    } else {
+        lface = assq_no_quit (face_name, Vface_new_frame_defaults);
+
+        if (CONSP (lface))
+            lface = XCDR (lface);
+        else if (signal_p)
+            signal_error ("Invalid face", face_name);
+
+        check_lface (lface);
+
+        return lface;
+    }
+}
+#endif

 /* Return the face definition of FACE_NAME on frame F.  F null means
    return the definition for new frames.  FACE_NAME may be a string or
__EOF__

  [[ -x configure ]] || ( ./autogen.sh git && ./autogen.sh autoconf )
}

build_() {
  cd "$srcdir/$pkgbase"

  make clean

  local _conf=(
    --prefix=/usr
    --sysconfdir=/etc
    --libexecdir=/usr/lib
    --localstatedir=/var
    --mandir=/usr/share/man
    --with-gameuser=:games
    --without-modules
    --without-toolkit-scroll-bars
    # Beware https://debbugs.gnu.org/cgi/bugreport.cgi?bug=25228
    # dconf and gconf break font settings you set in ~/.emacs.
    # If you insist you'll need to read that bug report in *full*.
    # Good luck!
   --without-gconf
   --without-gsettings
   --with-nativecomp
  )

  if [[ $NOX == "YES" ]]; then
    _conf+=( '--without-x' '--with-x-toolkit=no' '--with-sound=no' '--without-xft' '--without-lcms2' '--without-rsvg' );
  else
    _conf+=( '--with-x-toolkit=gtk3' '--with-sound=alsa' '--without-xaw3d' );
    if [[ $XWIDGETS == "YES" ]]; then
        _conf+=( '--with-xwidgets' );
    fi
  fi

  if [[ $NOCAIRO == "YES" ]] || [[ $NOX == "YES" ]]; then
    _conf+=( '--without-cairo' );
  fi

  if [[ $NOGZ == "YES" ]]; then
    _conf+=( '--without-compress-install' );
  fi

  export CFLAGS+=" -O3 -march=skylake -fomit-frame-pointer -g -flto"
  export CXXFLAGS+=" -O3 -march=skylake -fomit-frame-pointer -g -flto"

  if [[ $LTO == "YES" ]]; then
    export CFLAGS+=" -fuse-linker-plugin"
    export CXXFLAGS+=" -fuse-linker-plugin"
    _conf+=(
      '--enable-link-time-optimization'
    );
  fi

  if [[ $GOLD == "YES" ]]; then
    export LD=/usr/bin/ld.gold
    export CFLAGS+=" -fuse-ld=gold";
    export CXXFLAGS+=" -fuse-ld=gold";
  fi

  ./configure "${_conf[@]}"

  if [[ $COMPO3 == "YES" ]]; then
    export BYTE_COMPILE_EXTRA_FLAGS="--eval '(setq comp-speed 3)'"
  fi

  make NATIVE_FULL_AOT=1 bootstrap -j`nproc`
}

package_emacs-git() {
  provides=('emacs')
  conflicts=('emacs' 'emacs-nox')
  depends+=('alsa-lib' 'giflib' 'gtk3' 'harfbuzz' 'libjpeg-turbo' 'libotf' 'm17n-lib' 'xorgproto')

  if [[ ! $NOCAIRO == "YES" ]]; then
    depends+=( 'cairo' );
  fi

  if [[ $XWIDGETS == "YES" ]]; then
    depends+=( 'webkit2gtk' );
  fi

  NOX=""
  build_
  cd "$srcdir/$pkgbase"

  make DESTDIR="$pkgdir/" install

  # remove conflict with ctags package
  mv "$pkgdir"/usr/bin/{ctags,ctags.emacs}

  if [[ $NOGZ == "YES" ]]; then
    mv "$pkgdir"/usr/share/man/man1/{ctags.1,ctags.emacs.1};
  else
    mv "$pkgdir"/usr/share/man/man1/{ctags.1.gz,ctags.emacs.1.gz}
  fi

  # fix user/root permissions on usr/share files
  find "$pkgdir"/usr/share/emacs/ | xargs chown root:root

  # fix permssions on /var/games
  mkdir -p "$pkgdir"/var/games/emacs
  chmod 775 "$pkgdir"/var/games
  chmod 775 "$pkgdir"/var/games/emacs
  chown -R root:games "$pkgdir"/var/games

}

package_emacs-nox-git() {
  provides=('emacs-nox')
  conflicts=('emacs' 'emacs-git')

  NOX="YES"
  build_
  cd "$srcdir/$pkgbase"

  make DESTDIR="$pkgdir/" install

  # remove conflict with ctags package
  mv "$pkgdir"/usr/bin/{ctags,ctags.emacs}

  if [[ $NOGZ == "YES" ]]; then
    mv "$pkgdir"/usr/share/man/man1/{ctags.1,ctags.emacs.1};
  else
    mv "$pkgdir"/usr/share/man/man1/{ctags.1.gz,ctags.emacs.1.gz}
  fi

  # fix user/root permissions on usr/share files
  find "$pkgdir"/usr/share/emacs/ | xargs chown root:root

  # fix permssions on /var/games
  mkdir -p "$pkgdir"/var/games/emacs
  chmod 775 "$pkgdir"/var/games
  chmod 775 "$pkgdir"/var/games/emacs
  chown -R root:games "$pkgdir"/var/games
}

# vim:set ft=sh ts=2 sw=2 et:
