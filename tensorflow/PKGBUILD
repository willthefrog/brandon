# -*- mode: sh; tab-width: 2; -*-
# Maintainer: Yang Zhang <yangzhang@live.com>

pkgbase=tensorflow
pkgname=python-tensorflow-opt-cuda-git
pkgver=1.14.0
pkgrel=1
pkgdesc="Library for computation using data flow graphs for scalable machine learning"
url="https://www.tensorflow.org/"
license=('APACHE')
arch=('x86_64')
depends=(cuda cudnn nccl python-protobuf python-h5py python-numpy absl-py python-wrapt python-termcolor
         python-astunparse python-tensorflow-estimator python-opt_einsum python-astor python-gast
         python-keras-applications python-keras-preprocessing)
makedepends=(bazel git gcc python-pip python-wheel mold)
optdepends=('tensorboard: Tensorflow visualization toolkit'
            'python-pasta: for tf_upgrade_v2 script')
conflicts=(python-tensorflow)
provides=(python-tensorflow)
replaces=(python-tensorflow)
source=('git+https://github.com/tensorflow/tensorflow')
md5sums=('SKIP')

pkgver() {
  cd "${pkgbase}"
  echo "$(git log -1 --format="%cd" --date=short | sed 's|-||g').r$(git rev-list --count HEAD)".$(git describe --always | sed 's/.*-//g')
}

prepare() {
  cd "${pkgbase}"
  rm .bazelversion
}

build() {
  cd "${pkgbase}"

  if [ -e /opt/cuda/bin/gcc ]; then
    export GCC_HOST_COMPILER_PATH=/opt/cuda/bin/gcc
  fi
  if [ -e /opt/cuda/bin/g++ ]; then
    export HOST_CXX_COMPILER_PATH=/opt/cuda/bin/g++
  fi

  export LD_PRELOAD='/usr/lib/mold/mold-wrapper.so'
  export MOLD_PATH='/usr/bin/mold'

  TF_CUDA_COMPUTE_CAPABILITIES=6.1,7.0                                                             \
  PYTHON_BIN_PATH=/usr/bin/python                                                                  \
  USE_DEFAULT_PYTHON_LIB_PATH=1                                                                    \
  TF_IGNORE_MAX_BAZEL_VERSION=1                                                                    \
  TF_NEED_CUDA=1                                                                                   \
  TF_ENABLE_XLA=1                                                                                  \
  TF_NEED_GCP=1                                                                                    \
  TF_NEED_OPENCL_SYCL=0                                                                            \
  TF_NEED_OPENCL=0                                                                                 \
  TF_NEED_MPI=0                                                                                    \
  TF_NEED_TENSORRT=0                                                                               \
  TF_NEED_ROCM=0                                                                                   \
  TF_SET_ANDROID_WORKSPACE=0                                                                       \
  TF_CUDA_CLANG=0                                                                                  \
  TF_DOWNLOAD_CLANG=0                                                                              \
  TF_NCCL_VERSION=$(sed -n 's/^#define NCCL_MAJOR\s*\(.*\).*/\1/p' '/usr/include/nccl.h')          \
  TF_CUDA_PATHS=/opt/cuda,/usr/lib,/usr                                                            \
  TF_CUDA_VERSION=$(/opt/cuda/bin/nvcc --version | sed -n 's/^.*release \(.*\),.*/\1/p')           \
  TF_CUDNN_VERSION=$(sed -n 's/^#define CUDNN_MAJOR\s*\(.*\).*/\1/p' '/usr/include/cudnn.h')       \
  CC_OPT_FLAGS="-march=skylake -Wl,--as-needed -ffunction-sections"                                \
  ./configure

  CACHE_FLAGS=""
  if [ -n "${BAZEL_CACHE_BUCKET}" -a -n "${BAZEL_CACHE_AUTH}" ]; then
    msg2 "==== using remote cache on GCS ===="
    CACHE_FLAGS="--remote_http_cache=https://storage.googleapis.com/${BAZEL_CACHE_BUCKET} --google_credentials=${BAZEL_CACHE_AUTH}"
  fi

  bazel build ${MAKEFLAGS} --config=v2 --config=opt --config=native_arch_linux --config=nohdfs --config=noaws --config=short_logs \
    $CACHE_FLAGS //tensorflow/tools/pip_package:build_pip_package
  bazel-bin/tensorflow/tools/pip_package/build_pip_package "${srcdir}"/tmpoptcuda
}

get_pyver () {
  python -c 'import sys; print(str(sys.version_info[0]) + "." + str(sys.version_info[1]))'
}

package() {
  WHEEL_PACKAGE=$(find "${srcdir}"/tmpoptcuda -name "tensor*.whl")
  pip install --ignore-installed --upgrade --root "${pkgdir}"/ $WHEEL_PACKAGE --no-dependencies

  rm -rf "${pkgdir}/usr/lib/python$(get_pyver)"/site-packages/tensorflow_core/include
  rm -rf "${pkgdir}"/usr/bin/tensorboard
  install -Dm644 "${pkgbase}/LICENSE" "${pkgdir}"/usr/share/licenses/${pkgname}/LICENSE
}

# vim:set ts=2 sw=2 et:
